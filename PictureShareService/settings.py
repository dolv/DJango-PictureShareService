"""
Django settings for PictureShareService project.

Generated by 'django-admin startproject' using Django 1.9.7.
Later the project has been migrated to DJango 2.0

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
from dotenv import dotenv_values
from pathlib import Path

from PictureShareService import common
from .common import EnvVars

config = EnvVars('DJANGO_ENVIRONMENT')

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config.get_value(
    'SECRET_KEY',
    '*d+)ik(ywkov@c84l+mg#3y95ldd#$o64cv-ceygwufyl4y241'
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config.get_value('DEBUG', False)

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'djangosecure',
    'sslserver',
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_swagger',
    'corsheaders',
    'Core',
]

# MIDDLEWARE_CLASSES = [
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.BrokenLinkEmailsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    # 'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'PictureShareService.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'PictureShareService.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}
DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'
# REST framework 
REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    )
}


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


PROJECT_ROOT = os.path.abspath(os.path.dirname(os.path.dirname(__file__)))

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_URL = config.get_value('STATIC_URL','/static/')
STATIC_ROOT = config.get_value(
    'STATIC_ROOT',
    '/var/www/PictureShareService/static/'
)

STATICFILES_DIRS = [
    os.path.join(PROJECT_ROOT, "static"),
]

MEDIA_ROOT = config.get_value(
    'MEDIA_ROOT',
    os.path.join(PROJECT_ROOT, 'files')
)

MEDIA_URL = config.get_value('MEDIA_URL','/files/')

LOGIN_URL = "/user/login/"

# CORS_ORIGIN_ALLOW_ALL = True
CORS_ORIGIN_ALLOW_ALL = False

CORS_ORIGIN_WHITELIST = config.get_value(
    'CORS_ORIGIN_WHITELIST',
    ('http://localhost:4200',)
)

ALLOWED_HOSTS = config.get_value(
    'ALLOWED_HOSTS',
    'localhost,127.0.0.1'
).split(',')

############### SECURITY MIDDLEWARE SETTINGS ######################
# all non-SSL requests should be permanently redirected to SSL.
SECURE_SSL_REDIRECT = config.get_value('SECURE_SSL_REDIRECT', True)
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
# Set SESSION_COOKIE_SECURE and SESSION_COOKIE_HTTPONLY to True if you are using
# django.contrib.sessions. # These settings are not part of django-secure, but
# they should be used if running a secure site, and the checksecure management
# command will check their values.
# SESSION_COOKIE_HTTPONLY = config.get_value('SESSION_COOKIE_HTTPONLY', True)
SESSION_COOKIE_SECURE = config.get_value('SESSION_COOKIE_SECURE', True)
CSRF_COOKIE_SECURE = config.get_value('CSRF_COOKIE_SECURE', True)

## HSTS SETTINGS
# HSTS stands for HTTP Strict Transport Security
# HSTS mechanism overview http://en.wikipedia.org/wiki/Strict_Transport_Security
SECURE_HSTS_INCLUDE_SUBDOMAINS = config.get_value(
    'SECURE_HSTS_INCLUDE_SUBDOMAINS',
    True
)
SECURE_HSTS_SECONDS = 20
# Set the SECURE_BROWSER_XSS_FILTER setting to True, if you want to enable the
# browserâ€™s XSS filtering protections.
SECURE_BROWSER_XSS_FILTER = config.get_value('SECURE_BROWSER_XSS_FILTER', True)
#Set the SECURE_FRAME_DENY setting to True, if you want to prevent framing of
# your pages and protect them from clickjacking.
SECURE_FRAME_DENY = config.get_value('SECURE_FRAME_DENY', True)
#Set the SECURE_CONTENT_TYPE_NOSNIFF setting to True, if you want to prevent
# the browser from guessing asset content types.
SECURE_CONTENT_TYPE_NOSNIFF = config.get_value('SECURE_CONTENT_TYPE_NOSNIFF', True)